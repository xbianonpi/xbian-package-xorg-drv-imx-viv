--- a/DRI_1.10.4/src/dri.c	2014-04-02 14:37:09.000000000 +0200
+++ b/DRI_1.10.4/src/dri.c	2014-07-27 02:17:00.009573871 +0200
@@ -71,7 +71,6 @@
 #include "mipointer.h"
 #include "xf86_OSproc.h"
 #include "inputstr.h"
-#include "xf86VGAarbiter.h"
 
 static int DRIEntPrivIndex = -1;
 static DevPrivateKeyRec DRIScreenPrivKeyRec;
@@ -331,12 +330,12 @@
     return FALSE;
     }
 
-    if (!xf86VGAarbiterAllowDRI(pScreen)) {
+/*    if (!xf86VGAarbiterAllowDRI(pScreen)) {
         DRIDrvMsg(pScreen->myNum, X_WARNING,
                   "Direct rendering is not supported when VGA arb is necessary for the device\n");
     return FALSE;
     }
-
+*/
 #ifdef PANORAMIX
     /*
      * If Xinerama is on, don't allow DRI to initialise.  It won't be usable
@@ -1634,8 +1633,7 @@
 
     if (pDRIPriv &&
         pDRIPriv->pDriverInfo->wrap.WakeupHandler)
-        (*pDRIPriv->pDriverInfo->wrap.WakeupHandler)(i, wakeupData,
-                             result, pReadmask);
+        (*pDRIPriv->pDriverInfo->wrap.WakeupHandler)(wakeupData, result, pReadmask);
     }
 }
 
@@ -1650,16 +1648,15 @@
 
     if (pDRIPriv &&
         pDRIPriv->pDriverInfo->wrap.BlockHandler)
-        (*pDRIPriv->pDriverInfo->wrap.BlockHandler)(i, blockData,
+        (*pDRIPriv->pDriverInfo->wrap.BlockHandler)(blockData,
                             pTimeout, pReadmask);
     }
 }
 
 void
-DRIDoWakeupHandler(int screenNum, pointer wakeupData,
+DRIDoWakeupHandler(ScreenPtr pScreen,
                    unsigned long result, pointer pReadmask)
 {
-    ScreenPtr pScreen = screenInfo.screens[screenNum];
     DRIScreenPrivPtr pDRIPriv = DRI_SCREEN_PRIV(pScreen);
 
     DRILock(pScreen, 0);
@@ -1675,10 +1672,9 @@
 }
 
 void
-DRIDoBlockHandler(int screenNum, pointer blockData,
+DRIDoBlockHandler(ScreenPtr pScreen,
                   pointer pTimeout, pointer pReadmask)
 {
-    ScreenPtr pScreen = screenInfo.screens[screenNum];
     DRIScreenPrivPtr pDRIPriv = DRI_SCREEN_PRIV(pScreen);
 
     if (pDRIPriv->pDriverInfo->driverSwapMethod == DRI_HIDE_X_CONTEXT) {
@@ -2308,15 +2304,14 @@
 }
 
 void
-DRIAdjustFrame(int scrnIndex, int x, int y, int flags)
+DRIAdjustFrame(ScrnInfoPtr pScrn, int x, int y)
 {
-    ScreenPtr        pScreen  = screenInfo.screens[scrnIndex];
+    ScreenPtr        pScreen  = screenInfo.screens[pScrn->scrnIndex];
     DRIScreenPrivPtr pDRIPriv = DRI_SCREEN_PRIV(pScreen);
-    ScrnInfoPtr      pScrn    = xf86Screens[pScreen->myNum];
     int              px, py;
 
     if (!pDRIPriv || !pDRIPriv->pSAREA) {
-    DRIDrvMsg(scrnIndex, X_ERROR, "[DRI] No SAREA (%p %p)\n",
+    DRIDrvMsg(pScrn->scrnIndex, X_ERROR, "[DRI] No SAREA (%p %p)\n",
           pDRIPriv, pDRIPriv ? pDRIPriv->pSAREA : NULL);
     return;
     }
@@ -2342,7 +2337,7 @@
     /* unwrap */
     pScrn->AdjustFrame = pDRIPriv->wrap.AdjustFrame;
     /* call lower layers */
-    (*pScrn->AdjustFrame)(scrnIndex, x, y, flags);
+    (*pScrn->AdjustFrame)(pScrn->scrnIndex, x, y);
     /* rewrap */
     pDRIPriv->wrap.AdjustFrame = pScrn->AdjustFrame;
     pScrn->AdjustFrame         = DRIAdjustFrame;
--- a/DRI_1.10.4/src/dri.h	2014-04-02 14:37:09.000000000 +0200
+++ b/DRI_1.10.4/src/dri.h	2014-07-18 02:21:47.000000000 +0200
@@ -50,11 +50,10 @@
 
 typedef struct _DRIContextPrivRec DRIContextPrivRec, *DRIContextPrivPtr;
 
-typedef enum _DRIContextFlags
-{
-    DRI_CONTEXT_2DONLY    = 0x01,
+typedef enum _DRIContextFlags {
+    DRI_CONTEXT_2DONLY = 0x01,
     DRI_CONTEXT_PRESERVED = 0x02,
-    DRI_CONTEXT_RESERVED  = 0x04 /* DRI Only -- no kernel equivalent */
+    DRI_CONTEXT_RESERVED = 0x04 /* DRI Only -- no kernel equivalent */
 } DRIContextFlags;
 
 #define DRI_NO_CONTEXT 0
@@ -73,10 +72,8 @@
 #define DRI_3D_WINDOWS_ONLY  1
 #define DRI_ALL_WINDOWS      2
 
-
-typedef void (*ClipNotifyPtr)( WindowPtr, int, int );
-typedef void (*AdjustFramePtr)(int scrnIndex, int x, int y, int flags);
-
+typedef void (*ClipNotifyPtr) (WindowPtr, int, int);
+typedef void (*AdjustFramePtr) (ScrnInfoPtr pScrn, int x, int y);
 
 /*
  * These functions can be wrapped by the DRI.  Each of these have
@@ -84,17 +81,16 @@
  * overridden by the driver in its [driver]DRIScreenInit function.
  */
 typedef struct {
-    ScreenWakeupHandlerProcPtr   WakeupHandler;
-    ScreenBlockHandlerProcPtr    BlockHandler;
-    WindowExposuresProcPtr       WindowExposures;
-    CopyWindowProcPtr            CopyWindow;
-    ValidateTreeProcPtr          ValidateTree;
-    PostValidateTreeProcPtr      PostValidateTree;
-    ClipNotifyProcPtr            ClipNotify;
-    AdjustFramePtr               AdjustFrame;
+    ScreenWakeupHandlerProcPtr WakeupHandler;
+    ScreenBlockHandlerProcPtr BlockHandler;
+    WindowExposuresProcPtr WindowExposures;
+    CopyWindowProcPtr CopyWindow;
+    ValidateTreeProcPtr ValidateTree;
+    PostValidateTreeProcPtr PostValidateTree;
+    ClipNotifyProcPtr ClipNotify;
+    AdjustFramePtr AdjustFrame;
 } DRIWrappedFuncsRec, *DRIWrappedFuncsPtr;
 
-
 /*
  * Prior to Xorg 6.8.99.8, the DRIInfoRec structure was implicitly versioned
  * by the XF86DRI_*_VERSION defines in xf86dristr.h.  These numbers were also
@@ -112,8 +108,8 @@
 #define DRIINFO_MINOR_VERSION   4
 #define DRIINFO_PATCH_VERSION   0
 
-typedef unsigned long long (*DRITexOffsetStartProcPtr)(PixmapPtr pPix);
-typedef void (*DRITexOffsetFinishProcPtr)(PixmapPtr pPix);
+typedef unsigned long long (*DRITexOffsetStartProcPtr) (PixmapPtr pPix);
+typedef void (*DRITexOffsetFinishProcPtr) (PixmapPtr pPix);
 
 typedef struct {
     /* driver call back functions
@@ -123,155 +119,145 @@
      * Bump the DRIINFO minor number to indicate new fields.
      * Bump the DRIINFO major number to indicate binary-incompatible changes.
      */
-    Bool    (*CreateContext)(ScreenPtr pScreen,
-                 VisualPtr visual,
-                 drm_context_t hHWContext,
-                 void* pVisualConfigPriv,
-                 DRIContextType context);
-    void        (*DestroyContext)(ScreenPtr pScreen,
-                  drm_context_t hHWContext,
-                                  DRIContextType context);
-    void    (*SwapContext)(ScreenPtr pScreen,
-                   DRISyncType syncType,
-                   DRIContextType readContextType,
-                   void* readContextStore,
-                   DRIContextType writeContextType,
-                   void* writeContextStore);
-    void    (*InitBuffers)(WindowPtr pWin,
-                   RegionPtr prgn,
-                   CARD32 indx);
-    void    (*MoveBuffers)(WindowPtr pWin,
-                   DDXPointRec ptOldOrg,
-                   RegionPtr prgnSrc,
-                   CARD32 indx);
-    void        (*TransitionTo3d)(ScreenPtr pScreen);
-    void        (*TransitionTo2d)(ScreenPtr pScreen);
-
-    void    (*SetDrawableIndex)(WindowPtr pWin, CARD32 indx);
-    Bool        (*OpenFullScreen)(ScreenPtr pScreen);
-    Bool        (*CloseFullScreen)(ScreenPtr pScreen);
+    Bool (*CreateContext) (ScreenPtr pScreen,
+                           VisualPtr visual,
+                           drm_context_t hHWContext,
+                           void *pVisualConfigPriv, DRIContextType context);
+    void (*DestroyContext) (ScreenPtr pScreen,
+                            drm_context_t hHWContext, DRIContextType context);
+    void (*SwapContext) (ScreenPtr pScreen,
+                         DRISyncType syncType,
+                         DRIContextType readContextType,
+                         void *readContextStore,
+                         DRIContextType writeContextType,
+                         void *writeContextStore);
+    void (*InitBuffers) (WindowPtr pWin, RegionPtr prgn, CARD32 indx);
+    void (*MoveBuffers) (WindowPtr pWin,
+                         DDXPointRec ptOldOrg, RegionPtr prgnSrc, CARD32 indx);
+    void (*TransitionTo3d) (ScreenPtr pScreen);
+    void (*TransitionTo2d) (ScreenPtr pScreen);
+
+    void (*SetDrawableIndex) (WindowPtr pWin, CARD32 indx);
+    Bool (*OpenFullScreen) (ScreenPtr pScreen);
+    Bool (*CloseFullScreen) (ScreenPtr pScreen);
 
     /* wrapped functions */
-    DRIWrappedFuncsRec  wrap;
+    DRIWrappedFuncsRec wrap;
 
     /* device info */
-    char*       drmDriverName;
-    char*       clientDriverName;
-    char*       busIdString;
-    int         ddxDriverMajorVersion;
-    int         ddxDriverMinorVersion;
-    int         ddxDriverPatchVersion;
-    pointer     frameBufferPhysicalAddress;
-    long        frameBufferSize;
-    long        frameBufferStride;
-    long        SAREASize;
-    int         maxDrawableTableEntry;
-    int         ddxDrawableTableEntry;
-    long        contextSize;
-    DRISwapMethod       driverSwapMethod;
-    DRIWindowRequests   bufferRequests;
-    int         devPrivateSize;
-    void*       devPrivate;
-    Bool        createDummyCtx;
-    Bool        createDummyCtxPriv;
+    char *drmDriverName;
+    char *clientDriverName;
+    char *busIdString;
+    int ddxDriverMajorVersion;
+    int ddxDriverMinorVersion;
+    int ddxDriverPatchVersion;
+    void *frameBufferPhysicalAddress;
+    long frameBufferSize;
+    long frameBufferStride;
+    long SAREASize;
+    int maxDrawableTableEntry;
+    int ddxDrawableTableEntry;
+    long contextSize;
+    DRISwapMethod driverSwapMethod;
+    DRIWindowRequests bufferRequests;
+    int devPrivateSize;
+    void *devPrivate;
+    Bool createDummyCtx;
+    Bool createDummyCtxPriv;
 
     /* New with DRI version 4.1.0 */
-    void        (*TransitionSingleToMulti3D)(ScreenPtr pScreen);
-    void        (*TransitionMultiToSingle3D)(ScreenPtr pScreen);
+    void (*TransitionSingleToMulti3D) (ScreenPtr pScreen);
+    void (*TransitionMultiToSingle3D) (ScreenPtr pScreen);
 
     /* New with DRI version 5.1.0 */
-    void        (*ClipNotify)(ScreenPtr pScreen, WindowPtr *ppWin, int num);
+    void (*ClipNotify) (ScreenPtr pScreen, WindowPtr *ppWin, int num);
 
     /* New with DRI version 5.2.0 */
-    Bool                allocSarea;
-    Bool                keepFDOpen;
+    Bool allocSarea;
+    Bool keepFDOpen;
 
     /* New with DRI version 5.3.0 */
-    DRITexOffsetStartProcPtr  texOffsetStart;
+    DRITexOffsetStartProcPtr texOffsetStart;
     DRITexOffsetFinishProcPtr texOffsetFinish;
 
     /* New with DRI version 5.4.0 */
-    int             dontMapFrameBuffer;
-    drm_handle_t    hFrameBuffer; /* Handle to framebuffer, either
-                   * mapped by DDX driver or DRI */
+    int dontMapFrameBuffer;
+    drm_handle_t hFrameBuffer;  /* Handle to framebuffer, either
+                                 * mapped by DDX driver or DRI */
 
 } DRIInfoRec, *DRIInfoPtr;
 
-
-extern _X_EXPORT Bool DRIOpenDRMMaster(ScrnInfoPtr pScrn, unsigned long sAreaSize,
-                 const char *busID,
-                 const char *drmDriverName);
+extern _X_EXPORT Bool DRIOpenDRMMaster(ScrnInfoPtr pScrn,
+                                       unsigned long sAreaSize,
+                                       const char *busID,
+                                       const char *drmDriverName);
 
 extern _X_EXPORT Bool DRIScreenInit(ScreenPtr pScreen,
-                          DRIInfoPtr pDRIInfo,
-                          int *pDRMFD);
+                                    DRIInfoPtr pDRIInfo, int *pDRMFD);
 
 extern _X_EXPORT void DRICloseScreen(ScreenPtr pScreen);
 
-extern _X_EXPORT Bool DRIExtensionInit(void);
+extern _X_EXPORT Bool DRIExtensionInit(void);
 
 extern _X_EXPORT void DRIReset(void);
 
 extern _X_EXPORT Bool DRIQueryDirectRenderingCapable(ScreenPtr pScreen,
-                                           Bool *isCapable);
+                                                     Bool *isCapable);
 
 extern _X_EXPORT Bool DRIOpenConnection(ScreenPtr pScreen,
-                              drm_handle_t * hSAREA,
-                              char **busIdString);
+                                        drm_handle_t * hSAREA,
+                                        char **busIdString);
 
 extern _X_EXPORT Bool DRIAuthConnection(ScreenPtr pScreen, drm_magic_t magic);
 
 extern _X_EXPORT Bool DRICloseConnection(ScreenPtr pScreen);
 
 extern _X_EXPORT Bool DRIGetClientDriverName(ScreenPtr pScreen,
-                                   int* ddxDriverMajorVersion,
-                                   int* ddxDriverMinorVersion,
-                                   int* ddxDriverPatchVersion,
-                                   char** clientDriverName);
+                                             int *ddxDriverMajorVersion,
+                                             int *ddxDriverMinorVersion,
+                                             int *ddxDriverPatchVersion,
+                                             char **clientDriverName);
 
 extern _X_EXPORT Bool DRICreateContext(ScreenPtr pScreen,
-                             VisualPtr visual,
-                             XID context,
-                             drm_context_t * pHWContext);
+                                       VisualPtr visual,
+                                       XID context, drm_context_t * pHWContext);
 
 extern _X_EXPORT Bool DRIDestroyContext(ScreenPtr pScreen, XID context);
 
-extern _X_EXPORT Bool DRIContextPrivDelete(pointer pResource, XID id);
+extern _X_EXPORT Bool DRIContextPrivDelete(void *pResource, XID id);
 
 extern _X_EXPORT Bool DRICreateDrawable(ScreenPtr pScreen,
-                              ClientPtr client,
-                              DrawablePtr pDrawable,
-                              drm_drawable_t * hHWDrawable);
+                                        ClientPtr client,
+                                        DrawablePtr pDrawable,
+                                        drm_drawable_t * hHWDrawable);
 
 extern _X_EXPORT Bool DRIDestroyDrawable(ScreenPtr pScreen,
                                          ClientPtr client,
                                          DrawablePtr pDrawable);
 
-extern _X_EXPORT Bool DRIDrawablePrivDelete(pointer pResource,
-                                  XID id);
+extern _X_EXPORT Bool DRIDrawablePrivDelete(void *pResource, XID id);
 
 extern _X_EXPORT Bool DRIGetDrawableInfo(ScreenPtr pScreen,
-                               DrawablePtr pDrawable,
-                               unsigned int* indx,
-                               unsigned int* stamp,
-                               int* X,
-                               int* Y,
-                               int* W,
-                               int* H,
-                               int* numClipRects,
-                               drm_clip_rect_t ** pClipRects,
-                               int* backX,
-                               int* backY,
-                               int* numBackClipRects,
-                               drm_clip_rect_t ** pBackClipRects);
+                                         DrawablePtr pDrawable,
+                                         unsigned int *indx,
+                                         unsigned int *stamp,
+                                         int *X,
+                                         int *Y,
+                                         int *W,
+                                         int *H,
+                                         int *numClipRects,
+                                         drm_clip_rect_t ** pClipRects,
+                                         int *backX,
+                                         int *backY,
+                                         int *numBackClipRects,
+                                         drm_clip_rect_t ** pBackClipRects);
 
 extern _X_EXPORT Bool DRIGetDeviceInfo(ScreenPtr pScreen,
-                             drm_handle_t * hFrameBuffer,
-                             int* fbOrigin,
-                             int* fbSize,
-                             int* fbStride,
-                             int* devPrivateSize,
-                             void** pDevPrivate);
+                                       drm_handle_t * hFrameBuffer,
+                                       int *fbOrigin,
+                                       int *fbSize,
+                                       int *fbStride,
+                                       int *devPrivateSize, void **pDevPrivate);
 
 extern _X_EXPORT DRIInfoPtr DRICreateInfoRec(void);
 
@@ -279,51 +265,38 @@
 
 extern _X_EXPORT Bool DRIFinishScreenInit(ScreenPtr pScreen);
 
-extern _X_EXPORT void DRIWakeupHandler(pointer wakeupData,
-                             int result,
-                             pointer pReadmask);
-
-extern _X_EXPORT void DRIBlockHandler(pointer blockData,
-                            OSTimePtr pTimeout,
-                            pointer pReadmask);
-
-extern _X_EXPORT void DRIDoWakeupHandler(int screenNum,
-                               pointer wakeupData,
-                               unsigned long result,
-                               pointer pReadmask);
-
-extern _X_EXPORT void DRIDoBlockHandler(int screenNum,
-                              pointer blockData,
-                              pointer pTimeout,
-                              pointer pReadmask);
-
-extern _X_EXPORT void DRISwapContext(int drmFD,
-                           void *oldctx,
-                           void *newctx);
+extern _X_EXPORT void DRIWakeupHandler(void *wakeupData,
+                                       int result, void *pReadmask);
+
+extern _X_EXPORT void DRIBlockHandler(void *blockData,
+                                      OSTimePtr pTimeout, void *pReadmask);
+
+extern _X_EXPORT void DRIDoWakeupHandler(ScreenPtr pScreen,
+                                         unsigned long result,
+                                         void *pReadmask);
+
+extern _X_EXPORT void DRIDoBlockHandler(ScreenPtr pScreen,
+                                        void *pTimeout, void *pReadmask);
+
+extern _X_EXPORT void DRISwapContext(int drmFD, void *oldctx, void *newctx);
 
 extern _X_EXPORT void *DRIGetContextStore(DRIContextPrivPtr context);
 
 extern _X_EXPORT void DRIWindowExposures(WindowPtr pWin,
-                              RegionPtr prgn,
-                              RegionPtr bsreg);
+                                         RegionPtr prgn, RegionPtr bsreg);
 
 extern _X_EXPORT Bool DRIDestroyWindow(WindowPtr pWin);
 
 extern _X_EXPORT void DRICopyWindow(WindowPtr pWin,
-                          DDXPointRec ptOldOrg,
-                          RegionPtr prgnSrc);
+                                    DDXPointRec ptOldOrg, RegionPtr prgnSrc);
 
 extern _X_EXPORT int DRIValidateTree(WindowPtr pParent,
-                           WindowPtr pChild,
-                           VTKind    kind);
+                                     WindowPtr pChild, VTKind kind);
 
 extern _X_EXPORT void DRIPostValidateTree(WindowPtr pParent,
-                                WindowPtr pChild,
-                                VTKind    kind);
+                                          WindowPtr pChild, VTKind kind);
 
-extern _X_EXPORT void DRIClipNotify(WindowPtr pWin,
-                          int dx,
-                          int dy);
+extern _X_EXPORT void DRIClipNotify(WindowPtr pWin, int dx, int dy);
 
 extern _X_EXPORT CARD32 DRIGetDrawableIndex(WindowPtr pWin);
 
@@ -338,36 +311,38 @@
 extern _X_EXPORT void *DRIGetSAREAPrivate(ScreenPtr pScreen);
 
 extern _X_EXPORT unsigned int DRIGetDrawableStamp(ScreenPtr pScreen,
-                                        CARD32 drawable_index);
+                                                  CARD32 drawable_index);
 
 extern _X_EXPORT DRIContextPrivPtr DRICreateContextPriv(ScreenPtr pScreen,
-                                              drm_context_t * pHWContext,
-                                              DRIContextFlags flags);
-
-extern _X_EXPORT DRIContextPrivPtr DRICreateContextPrivFromHandle(ScreenPtr pScreen,
-                                                        drm_context_t hHWContext,
+                                                        drm_context_t *
+                                                        pHWContext,
                                                         DRIContextFlags flags);
 
+extern _X_EXPORT DRIContextPrivPtr DRICreateContextPrivFromHandle(ScreenPtr
+                                                                  pScreen,
+                                                                  drm_context_t
+                                                                  hHWContext,
+                                                                  DRIContextFlags
+                                                                  flags);
+
 extern _X_EXPORT Bool DRIDestroyContextPriv(DRIContextPrivPtr pDRIContextPriv);
 
 extern _X_EXPORT drm_context_t DRIGetContext(ScreenPtr pScreen);
 
 extern _X_EXPORT void DRIQueryVersion(int *majorVersion,
-                            int *minorVersion,
-                            int *patchVersion);
+                                      int *minorVersion, int *patchVersion);
 
-extern _X_EXPORT void DRIAdjustFrame(int scrnIndex, int x, int y, int flags);
+extern _X_EXPORT void DRIAdjustFrame(ScrnInfoPtr pScrn, int x, int y);
 
 extern _X_EXPORT void DRIMoveBuffersHelper(ScreenPtr pScreen,
-                                 int dx,
-                                 int dy,
-                                 int *xdir,
-                                 int *ydir,
-                                 RegionPtr reg);
+                                           int dx,
+                                           int dy,
+                                           int *xdir, int *ydir, RegionPtr reg);
 
 extern _X_EXPORT char *DRICreatePCIBusID(const struct pci_device *PciInfo);
 
-extern _X_EXPORT int drmInstallSIGIOHandler(int fd, void (*f)(int, void *, void *));
+extern _X_EXPORT int drmInstallSIGIOHandler(int fd,
+                                            void (*f) (int, void *, void *));
 extern _X_EXPORT int drmRemoveSIGIOHandler(int fd);
 extern _X_EXPORT int DRIMasterFD(ScrnInfoPtr pScrn);
 
@@ -376,8 +351,10 @@
 extern _X_EXPORT drm_handle_t DRIMasterSareaHandle(ScrnInfoPtr pScrn);
 
 extern _X_EXPORT void DRIGetTexOffsetFuncs(ScreenPtr pScreen,
-                 DRITexOffsetStartProcPtr *texOffsetStartFunc,
-                 DRITexOffsetFinishProcPtr *texOffsetFinishFunc);
+                                           DRITexOffsetStartProcPtr *
+                                           texOffsetStartFunc,
+                                           DRITexOffsetFinishProcPtr *
+                                           texOffsetFinishFunc);
 
 #define _DRI_H_
 
--- a/EXA/src/makefile.linux	2014-04-02 14:37:09.000000000 +0200
+++ b/EXA/src/makefile.linux	2014-07-27 00:40:19.139217018 +0200
@@ -54,7 +54,7 @@
 LOCAL_CFLAGS += -fvisibility=hidden -fPIC -DPIC -DFREESCALE_EXTENSION
 LOCAL_CFLAGS += -I. -I.. -I$(sysroot)/usr/include -I$(sysroot)/usr/include/xorg -I$(sysroot)/usr/include/$(PIXMAN)
 LOCAL_CFLAGS += -I./vivante_gal -I./vivante_fbdev -I./vivante_util -I./vivante_exa -I./vivante_extension
-LOCAL_CFLAGS += -I$(sysroot)/usr/include/drm
+LOCAL_CFLAGS += -I$(sysroot)/usr/include/drm -I/usr/include/xcb
 
 LOCAL_LFLAGS += -fPIC
 LOCAL_LFLAGS += -L$(sysroot)/usr/lib -lm -ldl -lGAL -Wl,-soname -Wl,vivante_drv.so
--- a/EXA/src/makefile.tc	2014-04-02 14:37:35.000000000 +0200
+++ b/EXA/src/makefile.tc	2014-07-26 23:52:05.213423488 +0200
@@ -42,7 +42,7 @@
 endif
 
 # strict check
-CFLAGS += -Werror
+##CFLAGS += -Werror
 
 # prefix: install path. This driver will be copied to $(prefix)/lib/xorg/modules/drivers/
 # when call make -f makefile.linux prefix=... install
@@ -52,8 +52,8 @@
 sysroot ?= /
 
 # get git commit number
-COMMITNR := `git log -n 1 --format=%H`
-DIRTY := `git diff-index --quiet HEAD || echo '-dirty'`
+##COMMITNR := `git log -n 1 --format=%H`
+##DIRTY := `git diff-index --quiet HEAD || echo '-dirty'`
 LOCAL_CFLAGS += -DCOMMIT="${COMMITNR}${DIRTY}"
 
 
--- a/EXA/src/vivante_fbdev/vivante_fbdev_driver.c	2014-04-02 14:37:35.000000000 +0200
+++ b/EXA/src/vivante_fbdev/vivante_fbdev_driver.c	2014-07-27 01:04:41.277060477 +0200
@@ -33,6 +33,7 @@
 #include <errno.h>
 #include <linux/fb.h>
 #include <xorg/shmint.h>
+#include <xorg/extension.h>
 
 #define USE_VIV_FB
 
--- a/EXA/src/vivante_util/vivante_debug.h	2014-04-02 14:37:09.000000000 +0200
+++ b/EXA/src/vivante_util/vivante_debug.h	2014-07-26 23:51:12.124788819 +0200
@@ -27,7 +27,7 @@
 #endif
 #include <stdio.h>
 
-//#define ENABLE_LOG
+#define ENABLE_LOG
 //#define DRAWING_STATISTICS
 
 #if defined(ENABLE_LOG)
--- a/EXA/src/vivante_fbdev/vivante_fbdev_driver.c	2014-04-02 14:37:35.000000000 +0200
+++ b/EXA/src/vivante_fbdev/vivante_fbdev_driver.c	2014-07-27 01:04:41.277060477 +0200
@@ -261,7 +262,7 @@
         setupDone = TRUE;
         xf86AddDriver(&FBDEV, module, HaveDriverFuncs);
         if(gVivFb)
-            LoadExtension(&VIVExt, FALSE);
+            LoadExtensionList(VIVExt, ARRAY_SIZE(VIVExt), FALSE);
 		return (pointer)1;
     } else {
         if (errmaj) *errmaj = LDR_ONCEONLY;
